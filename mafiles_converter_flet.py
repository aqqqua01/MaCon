#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MaCon - MaFiles Converter v2 - Flet UI –≤–µ—Ä—Å—ñ—è
–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Ñ–∞–π–ª–∏ –∑ –ª–æ–≥—ñ–Ω–∞–º–∏/–ø–∞—Ä–æ–ª—è–º–∏ —É —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Steam Guard
"""

import os
import shutil
import logging
import json
from pathlib import Path
from typing import List, Tuple, Optional, Dict, Any
import threading
import time
import asyncio

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É
import pandas as pd

# Flet
import flet as ft

# –ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω—ñ—Å—Ç—å
TRANSLATIONS = {
    "en": {
        "title": "MaCon",
        "subtitle": "MaFiles Converter",
        "credentials_file": "Credentials file (XLSX)",
        "mafiles_dir": ".maFile files directory",
        "output_dir": "Output directory",
        "select": "üìÇ Select",
        "files_dirs": "üìÅ Files and Directories",
        "column_settings": "‚öôÔ∏è Column Settings",
        "login_column": "Login column",
        "password_column": "Password column",
        "start_row": "Start from row",
        "apply": "‚úì Apply",
        "settings_help": "Column and row numbers match positions in Excel",
        "convert": "üöÄ Convert",
        "logs": "üìã Logs",
        "hover_to_view": "(hover to view)",
        "language": "üåê Language",
        "settings_applied": "Settings applied",
        "error": "Error",
        "select_credentials": "Select credentials file",
        "select_mafiles": "Select .maFile directory",
        "select_output": "Select output directory",
        "conversion_started": "üöÄ Conversion started...",
        "reading_file": "üìÇ Reading file",
        "found_credentials": "‚úì Found {count} login/password pairs",
        "processing_mafiles": "üîç Processing .maFile files",
        "conversion_complete": "‚úÖ Conversion completed successfully!",
        "copied_files": "üìä Copied {count} .maFile files",
        "saved_to": "üíæ Results saved to",
        "success_title": "Success!",
        "success_message": "‚úÖ Conversion completed!\n\nüìä Processed accounts: {count}\nüìÅ .maFile files copied: {count}\nüíæ accounts.txt created\n\nüìÇ Saved to:\n{path}",
        "error_occurred": "‚ùå Error",
        "notification_success": "SUCCESS",
        "notification_processed": "Processed {count} files",
    },
    "uk": {
        "title": "MaCon",
        "subtitle": "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä MaFiles",
        "credentials_file": "–§–∞–π–ª –∑ –ª–æ–≥—ñ–Ω–∞–º–∏/–ø–∞—Ä–æ–ª—è–º–∏ (XLSX)",
        "mafiles_dir": "–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –∑ .maFile —Ñ–∞–π–ª–∞–º–∏",
        "output_dir": "–í–∏—Ö—ñ–¥–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è",
        "select": "üìÇ –û–±—Ä–∞—Ç–∏",
        "files_dirs": "üìÅ –§–∞–π–ª–∏ —Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó",
        "column_settings": "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤",
        "login_column": "–°—Ç–æ–≤–ø–µ—Ü—å –ª–æ–≥—ñ–Ω–∞",
        "password_column": "–°—Ç–æ–≤–ø–µ—Ü—å –ø–∞—Ä–æ–ª—è",
        "start_row": "–ü–æ—á–∞—Ç–∏ –∑ —Ä—è–¥–∫–∞",
        "apply": "‚úì –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏",
        "settings_help": "–ù–æ–º–µ—Ä–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ç–∞ —Ä—è–¥–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–æ–∑–∏—Ü—ñ—ó –≤ Excel",
        "convert": "üöÄ –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏",
        "logs": "üìã –õ–æ–≥–∏",
        "hover_to_view": "(–Ω–∞–≤–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É)",
        "language": "üåê –ú–æ–≤–∞",
        "settings_applied": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ",
        "error": "–ü–æ–º–∏–ª–∫–∞",
        "select_credentials": "–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ –ª–æ–≥—ñ–Ω–∞–º–∏/–ø–∞—Ä–æ–ª—è–º–∏",
        "select_mafiles": "–û–±–µ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ .maFile —Ñ–∞–π–ª–∞–º–∏",
        "select_output": "–û–±–µ—Ä—ñ—Ç—å –≤–∏—Ö—ñ–¥–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é",
        "conversion_started": "üöÄ –ü–æ—á–∞—Ç–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó...",
        "reading_file": "üìÇ –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É",
        "found_credentials": "‚úì –ó–Ω–∞–π–¥–µ–Ω–æ {count} –ø–∞—Ä –ª–æ–≥—ñ–Ω/–ø–∞—Ä–æ–ª—å",
        "processing_mafiles": "üîç –û–±—Ä–æ–±–∫–∞ .maFile —Ñ–∞–π–ª—ñ–≤",
        "conversion_complete": "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!",
        "copied_files": "üìä –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ {count} .maFile —Ñ–∞–π–ª—ñ–≤",
        "saved_to": "üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤",
        "success_title": "–£—Å–ø—ñ—Ö!",
        "success_message": "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –û–±—Ä–æ–±–ª–µ–Ω–æ –∞–∫–∞—É–Ω—Ç—ñ–≤: {count}\nüìÅ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ .maFile —Ñ–∞–π–ª—ñ–≤: {count}\nüíæ –°—Ç–≤–æ—Ä–µ–Ω–æ accounts.txt\n\nüìÇ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤:\n{path}",
        "error_occurred": "‚ùå –ü–æ–º–∏–ª–∫–∞",
        "notification_success": "–£–°–ü–Ü–•",
        "notification_processed": "–û–±—Ä–æ–±–ª–µ–Ω–æ {count} —Ñ–∞–π–ª—ñ–≤",
    },
    "ru": {
        "title": "MaCon",
        "subtitle": "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä MaFiles",
        "credentials_file": "–§–∞–π–ª —Å –ª–æ–≥–∏–Ω–∞–º–∏/–ø–∞—Ä–æ–ª—è–º–∏ (XLSX)",
        "mafiles_dir": "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å .maFile —Ñ–∞–π–ª–∞–º–∏",
        "output_dir": "–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è",
        "select": "üìÇ –í—ã–±—Ä–∞—Ç—å",
        "files_dirs": "üìÅ –§–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
        "column_settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤",
        "login_column": "–°—Ç–æ–ª–±–µ—Ü –ª–æ–≥–∏–Ω–∞",
        "password_column": "–°—Ç–æ–ª–±–µ—Ü –ø–∞—Ä–æ–ª—è",
        "start_row": "–ù–∞—á–∞—Ç—å —Å–æ —Å—Ç—Ä–æ–∫–∏",
        "apply": "‚úì –ü—Ä–∏–º–µ–Ω–∏—Ç—å",
        "settings_help": "–ù–æ–º–µ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å—Ç—Ä–æ–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ Excel",
        "convert": "üöÄ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
        "logs": "üìã –õ–æ–≥–∏",
        "hover_to_view": "(–Ω–∞–≤–µ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)",
        "language": "üåê –Ø–∑—ã–∫",
        "settings_applied": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã",
        "error": "–û—à–∏–±–∫–∞",
        "select_credentials": "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ª–æ–≥–∏–Ω–∞–º–∏/–ø–∞—Ä–æ–ª—è–º–∏",
        "select_mafiles": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å .maFile —Ñ–∞–π–ª–∞–º–∏",
        "select_output": "–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é",
        "conversion_started": "üöÄ –ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...",
        "reading_file": "üìÇ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞",
        "found_credentials": "‚úì –ù–∞–π–¥–µ–Ω–æ {count} –ø–∞—Ä –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å",
        "processing_mafiles": "üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ .maFile —Ñ–∞–π–ª–æ–≤",
        "conversion_complete": "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
        "copied_files": "üìä –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {count} .maFile —Ñ–∞–π–ª–æ–≤",
        "saved_to": "üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤",
        "success_title": "–£—Å–ø–µ—Ö!",
        "success_message": "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {count}\nüìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ .maFile —Ñ–∞–π–ª–æ–≤: {count}\nüíæ –°–æ–∑–¥–∞–Ω accounts.txt\n\nüìÇ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤:\n{path}",
        "error_occurred": "‚ùå –û—à–∏–±–∫–∞",
        "notification_success": "–£–°–ü–ï–•",
        "notification_processed": "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} —Ñ–∞–π–ª–æ–≤",
    }
}

class SettingsManager:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–∏"""
    
    def __init__(self, config_file: str = "mafiles_converter_config.json"):
        self.config_file = Path(config_file)
        self.default_settings = {
            "credentials_file": "",
            "mafiles_dir": "",
            "output_dir": "",
            "login_column": 1,
            "password_column": 2,
            "start_row": 1,
            "language": "en",
            "theme_mode": "dark",
        }
    
    def load_settings(self) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ —Ñ–∞–π–ª—É"""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                    merged_settings = self.default_settings.copy()
                    merged_settings.update(settings)
                    return merged_settings
            else:
                return self.default_settings.copy()
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
            return self.default_settings.copy()
    
    def save_settings(self, settings: Dict[str, Any]) -> bool:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —É —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=4, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
            return False

class MaFilesConverter:
    def __init__(self):
        self.setup_logging()
        self.credentials = []
        self.mafiles_dir = ""
        self.output_dir = ""
        self.login_column = 1
        self.password_column = 2
        self.start_row = 1
        
    def setup_logging(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('mafiles_converter.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def _clean(self, s) -> str:
        """–û—á–∏—â–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤"""
        return str(s).strip() if s is not None else ""
    
    def set_column_settings(self, login_column: int, password_column: int):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è –ª–æ–≥—ñ–Ω—ñ–≤ —Ç–∞ –ø–∞—Ä–æ–ª—ñ–≤"""
        if login_column < 1 or password_column < 1:
            raise ValueError("–ù–æ–º–µ—Ä–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
        if login_column == password_column:
            raise ValueError("–°—Ç–æ–≤–ø—Ü—ñ –¥–ª—è –ª–æ–≥—ñ–Ω–∞ —Ç–∞ –ø–∞—Ä–æ–ª—è –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏")
        
        self.login_column = login_column
        self.password_column = password_column
        self.logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–æ–≤–ø—Ü—ñ: –ª–æ–≥—ñ–Ω={login_column}, –ø–∞—Ä–æ–ª—å={password_column}")
    
    def set_start_row(self, start_row: int):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
        if start_row < 1:
            raise ValueError("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—è–¥–æ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
        
        self.start_row = start_row
        self.logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—è–¥–æ–∫: {start_row}")
    
    def parse_xlsx_credentials(self, xlsx_path: str, sheet_index: int = 0, header: int = None) -> List[Tuple[str, str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ XLSX —Ñ–∞–π–ª—É –∑ –ª–æ–≥—ñ–Ω–∞–º–∏/–ø–∞—Ä–æ–ª—è–º–∏"""
        try:
            self.logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ XLSX —Ñ–∞–π–ª—É: {xlsx_path}")
            self.logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å—Ç–æ–≤–ø—Ü—ñ: –ª–æ–≥—ñ–Ω={self.login_column}, –ø–∞—Ä–æ–ª—å={self.password_column}, –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—è–¥–æ–∫={self.start_row}")
            
            df = pd.read_excel(xlsx_path, sheet_name=sheet_index, header=None, engine="openpyxl")
            
            required_columns = max(self.login_column, self.password_column)
            if df.shape[1] < required_columns:
                raise ValueError(f"–£ XLSX –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å—Ç–æ–≤–ø—Ü—ñ–≤. –ó–Ω–∞–π–¥–µ–Ω–æ: {df.shape[1]}, –ø–æ—Ç—Ä—ñ–±–Ω–æ: {required_columns}")
            
            creds = []
            for i in range(self.start_row - 1, len(df)):
                row = df.iloc[i]
                
                login = self._clean(row.iloc[self.login_column - 1])
                password = self._clean(row.iloc[self.password_column - 1])
                
                if login and password:
                    creds.append((login, password))
                    self.logger.info(f"–†—è–¥–æ–∫ {i+1}: –¥–æ–¥–∞–Ω–æ {login}")
                else:
                    self.logger.warning(f"–†—è–¥–æ–∫ {i+1}: –ø–æ—Ä–æ–∂–Ω—ñ–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å")
            
            if not creds:
                raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏—Ö –ø–∞—Ä –ª–æ–≥—ñ–Ω/–ø–∞—Ä–æ–ª—å —É XLSX.")
            
            self.logger.info(f"XLSX: –∑–Ω–∞–π–¥–µ–Ω–æ {len(creds)} –ø–∞—Ä –ª–æ–≥—ñ–Ω/–ø–∞—Ä–æ–ª—å")
            return creds
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É XLSX: {e}")
            raise
    
    def extract_credentials(self, path: str) -> List[Tuple[str, str]]:
        """–ê–≤—Ç–æ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É —Ñ–∞–π–ª—É —Ç–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–Ω—ñ–≤/–ø–∞—Ä–æ–ª—ñ–≤"""
        ext = Path(path).suffix.lower()
        self.logger.info(f"–û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: {path} (—Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è: {ext})")
        
        if ext in {".xlsx", ".xls"}:
            return self.parse_xlsx_credentials(path)
        else:
            raise ValueError(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É: {ext}. –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ XLSX/XLS")
    
    def find_mafiles(self, directory: str) -> List[str]:
        """–ü–æ—à—É–∫ .maFile —Ñ–∞–π–ª—ñ–≤ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
        mafiles = []
        for file in Path(directory).rglob("*.maFile"):
            mafiles.append(str(file))
        return mafiles
    
    def read_mafile_login(self, mafile_path: str) -> Optional[str]:
        """–ß–∏—Ç–∞–Ω–Ω—è –ª–æ–≥—ñ–Ω–∞ –∑ .maFile —Ñ–∞–π–ª—É"""
        try:
            with open(mafile_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                login = data.get('account_name', '').strip()
                if login:
                    self.logger.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–æ–≥—ñ–Ω –∑ {Path(mafile_path).name}: {login}")
                    return login
                else:
                    self.logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ account_name –≤ {Path(mafile_path).name}")
                    return None
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è {mafile_path}: {e}")
            return None
    
    def get_mafiles_with_logins(self, directory: str) -> List[Tuple[str, str]]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è .maFile —Ñ–∞–π–ª—ñ–≤ –∑ —ó—Ö –ª–æ–≥—ñ–Ω–∞–º–∏"""
        mafiles = self.find_mafiles(directory)
        mafiles_with_logins = []
        
        for mafile_path in mafiles:
            login = self.read_mafile_login(mafile_path)
            if login:
                mafiles_with_logins.append((mafile_path, login))
            else:
                filename = Path(mafile_path).stem
                mafiles_with_logins.append((mafile_path, filename))
                self.logger.warning(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —ñ–º'—è —Ñ–∞–π–ª—É —è–∫ –ª–æ–≥—ñ–Ω: {filename}")
        
        return mafiles_with_logins
    
    def process_mafiles(self, credentials: List[Tuple[str, str]], mafiles_dir: str, output_dir: str):
        """–û–±—Ä–æ–±–∫–∞ .maFile —Ñ–∞–π–ª—ñ–≤ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è accounts.txt"""
        try:
            Path(output_dir).mkdir(parents=True, exist_ok=True)
            
            mafiles_with_logins = self.get_mafiles_with_logins(mafiles_dir)
            self.logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(mafiles_with_logins)} .maFile —Ñ–∞–π–ª—ñ–≤ –∑ –ª–æ–≥—ñ–Ω–∞–º–∏")
            
            if not mafiles_with_logins:
                raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ .maFile —Ñ–∞–π–ª—ñ–≤ —É –≤–∫–∞–∑–∞–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
            
            credentials_dict = dict(credentials)
            self.logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ñ –ª–æ–≥—ñ–Ω–∏ –≤ credentials: {list(credentials_dict.keys())}")
            
            filtered_mafiles = []
            for mafile_path, mafile_login in mafiles_with_logins:
                if mafile_login in credentials_dict:
                    filtered_mafiles.append((mafile_path, mafile_login))
                    self.logger.info(f"–î–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–æ–±–∫–∏: {mafile_login} (—î –ø–∞—Ä–æ–ª—å)")
                else:
                    self.logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {mafile_login} (–Ω–µ–º–∞—î –ø–∞—Ä–æ–ª—è –≤ credentials)")
            
            self.logger.info(f"–ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–ª–∏—à–∏–ª–æ—Å—è {len(filtered_mafiles)} .maFile —Ñ–∞–π–ª—ñ–≤")
            
            if not filtered_mafiles:
                raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ .maFile —Ñ–∞–π–ª—ñ–≤ –∑ –ª–æ–≥—ñ–Ω–∞–º–∏, –¥–ª—è —è–∫–∏—Ö —î –ø–∞—Ä–æ–ª—ñ –≤ credentials")
            
            accounts_path = Path(output_dir) / "accounts.txt"
            with open(accounts_path, 'w', encoding='utf-8') as f:
                for mafile_path, mafile_login in filtered_mafiles:
                    password = credentials_dict[mafile_login]
                    f.write(f"{mafile_login}:{password}\n")
                    self.logger.info(f"–î–æ–¥–∞–Ω–æ –≤ accounts.txt: {mafile_login}:{password}")
            
            self.logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ accounts.txt –∑ {len(filtered_mafiles)} –∞–∫–∞—É–Ω—Ç–∞–º–∏")
            
            copied_count = 0
            for mafile_path, mafile_login in filtered_mafiles:
                new_name = f"{mafile_login}.maFile"
                dest_path = Path(output_dir) / new_name
                
                try:
                    shutil.copy2(mafile_path, dest_path)
                    self.logger.info(f"–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: {Path(mafile_path).name} -> {new_name}")
                    copied_count += 1
                except Exception as e:
                    self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è {mafile_path}: {e}")
            
            self.logger.info(f"–£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ {copied_count} .maFile —Ñ–∞–π–ª—ñ–≤")
            return copied_count
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ .maFile —Ñ–∞–π–ª—ñ–≤: {e}")
            raise

class MaFilesConverterGUI:
    def __init__(self):
        self.converter = MaFilesConverter()
        self.settings_manager = SettingsManager()
        self.settings = self.settings_manager.load_settings()
        self.current_lang = self.settings.get("language", "en")
        
    def t(self, key: str, **kwargs) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
        text = TRANSLATIONS.get(self.current_lang, TRANSLATIONS["en"]).get(key, key)
        if kwargs:
            text = text.format(**kwargs)
        return text
    
    def main(self, page: ft.Page):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è Flet"""
        page.title = "MaCon"
        page.theme_mode = self.settings.get("theme_mode", "dark")
        page.padding = 20
        page.window_min_width = 600
        page.window_min_height = 500
        page.window_width = 900
        page.window_height = 700
        
        # –Ü–∫–æ–Ω–∫–∞ –≤—ñ–∫–Ω–∞ (–ø—ñ–¥—Ç—Ä–∏–º—É—î PNG, ICO, SVG)
        page.window_icon = "MaCon.svg"
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏
        page.theme = ft.Theme(
            color_scheme_seed="blue",
        )
        page.dark_theme = ft.Theme(
            color_scheme_seed="blue",
        )
        
        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —à–ª—è—Ö—ñ–≤
        credentials_file_text = ft.TextField(
            value=self.settings.get("credentials_file", ""),
            label=self.t("credentials_file"),
            read_only=True,
            expand=True,
        )
        
        mafiles_dir_text = ft.TextField(
            value=self.settings.get("mafiles_dir", ""),
            label=self.t("mafiles_dir"),
            read_only=True,
            expand=True,
        )
        
        output_dir_text = ft.TextField(
            value=self.settings.get("output_dir", ""),
            label=self.t("output_dir"),
            read_only=True,
            expand=True,
        )
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤
        login_column_field = ft.TextField(
            value=str(self.settings.get("login_column", 1)),
            label=self.t("login_column"),
            width=150,
            keyboard_type="number",
        )
        
        password_column_field = ft.TextField(
            value=str(self.settings.get("password_column", 2)),
            label=self.t("password_column"),
            width=150,
            keyboard_type="number",
        )
        
        start_row_field = ft.TextField(
            value=str(self.settings.get("start_row", 1)),
            label=self.t("start_row"),
            width=150,
            keyboard_type="number",
        )
        
        # Dropdown –¥–ª—è –º–æ–≤–∏
        language_dropdown = ft.Dropdown(
            width=150,
            value=self.current_lang,
            options=[
                ft.dropdown.Option("en", "English"),
                ft.dropdown.Option("uk", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"),
                ft.dropdown.Option("ru", "–†—É—Å—Å–∫–∏–π"),
            ],
        )
        
        # –ü–µ—Ä–µ–º–∏–∫–∞—á —Ç–µ–º–∏
        def toggle_theme(e):
            if page.theme_mode == "dark":
                page.theme_mode = "light"
                theme_icon_button.icon = "dark_mode"
                theme_icon_button.tooltip = "–¢–µ–º–Ω–∞ —Ç–µ–º–∞"
            else:
                page.theme_mode = "dark"
                theme_icon_button.icon = "light_mode"
                theme_icon_button.tooltip = "–°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞"
            
            self.settings["theme_mode"] = page.theme_mode
            self.settings_manager.save_settings(self.settings)
            page.update()
        
        theme_icon_button = ft.IconButton(
            icon="light_mode" if page.theme_mode == "dark" else "dark_mode",
            tooltip="–°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞" if page.theme_mode == "dark" else "–¢–µ–º–Ω–∞ —Ç–µ–º–∞",
            on_click=toggle_theme,
        )
        
        # –õ–æ–≥ –æ–±–ª–∞—Å—Ç—å (–ø—Ä–∏—Ö–æ–≤–∞–Ω–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
        log_view = ft.ListView(
            expand=True,
            spacing=5,
            auto_scroll=True,
        )
        
        log_container = ft.Container(
            content=log_view,
            bgcolor="black12",
            border_radius=5,
            padding=10,
            height=200,
        )
        
        def log_message(message: str):
            """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –ª–æ–≥—ñ–≤"""
            log_view.controls.append(
                ft.Text(message, size=12, selectable=True)
            )
            page.update()
        
        def update_ui_language():
            """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
            credentials_file_text.label = self.t("credentials_file")
            mafiles_dir_text.label = self.t("mafiles_dir")
            output_dir_text.label = self.t("output_dir")
            login_column_field.label = self.t("login_column")
            password_column_field.label = self.t("password_column")
            start_row_field.label = self.t("start_row")
            
            files_dirs_title.value = self.t("files_dirs")
            column_settings_title.value = self.t("column_settings")
            settings_help_text.value = self.t("settings_help")
            apply_button.text = self.t("apply")
            convert_button.text = self.t("convert")
            logs_title.value = f"{self.t('logs')} {self.t('hover_to_view')}"
            select_button_1.text = self.t("select")
            select_button_2.text = self.t("select")
            select_button_3.text = self.t("select")
            subtitle_text.value = self.t("subtitle")
            
            page.update()
        
        def change_language(e):
            """–ó–º—ñ–Ω–∞ –º–æ–≤–∏"""
            self.current_lang = language_dropdown.value
            self.settings["language"] = self.current_lang
            self.settings_manager.save_settings(self.settings)
            update_ui_language()
        
        language_dropdown.on_change = change_language
        
        def apply_settings(e):
            """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
            try:
                login_col = int(login_column_field.value)
                password_col = int(password_column_field.value)
                start_row = int(start_row_field.value)
                
                self.converter.set_column_settings(login_col, password_col)
                self.converter.set_start_row(start_row)
                
                self.settings["login_column"] = login_col
                self.settings["password_column"] = password_col
                self.settings["start_row"] = start_row
                self.settings_manager.save_settings(self.settings)
                
                log_message(f"‚úì {self.t('settings_applied')}")
                
                page.snack_bar = ft.SnackBar(
                    content=ft.Text(self.t("settings_applied"), color="white"),
                    bgcolor="green",
                )
                page.snack_bar.open = True
                page.update()
                
            except Exception as ex:
                page.snack_bar = ft.SnackBar(
                    content=ft.Text(f"{self.t('error')}: {ex}", color="white"),
                    bgcolor="red",
                )
                page.snack_bar.open = True
                page.update()
        
        def pick_credentials_file(e: ft.FilePickerResultEvent):
            """–í–∏–±—ñ—Ä —Ñ–∞–π–ª—É –∑ –ª–æ–≥—ñ–Ω–∞–º–∏/–ø–∞—Ä–æ–ª—è–º–∏"""
            if e.files:
                file_path = e.files[0].path
                credentials_file_text.value = file_path
                self.settings["credentials_file"] = file_path
                self.settings_manager.save_settings(self.settings)
                apply_settings(None)
                page.update()
        
        def pick_mafiles_dir(e: ft.FilePickerResultEvent):
            """–í–∏–±—ñ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ .maFile —Ñ–∞–π–ª–∞–º–∏"""
            if e.path:
                mafiles_dir_text.value = e.path
                self.settings["mafiles_dir"] = e.path
                self.settings_manager.save_settings(self.settings)
                page.update()
        
        def pick_output_dir(e: ft.FilePickerResultEvent):
            """–í–∏–±—ñ—Ä –≤–∏—Ö—ñ–¥–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
            if e.path:
                output_dir_text.value = e.path
                self.settings["output_dir"] = e.path
                self.settings_manager.save_settings(self.settings)
                page.update()
        
        # File pickers
        credentials_file_picker = ft.FilePicker(on_result=pick_credentials_file)
        mafiles_dir_picker = ft.FilePicker(on_result=pick_mafiles_dir)
        output_dir_picker = ft.FilePicker(on_result=pick_output_dir)
        
        page.overlay.extend([credentials_file_picker, mafiles_dir_picker, output_dir_picker])
        
        def show_success_notification(copied_count: int, output_path: str):
            """–ü–æ–∫–∞–∑–∞—Ç–∏ toast-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–µ –∑–µ–ª–µ–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –ø—Ä–∞–≤–æ–º—É –Ω–∏–∂–Ω—å–æ–º—É –∫—É—Ç—ñ
            notification = ft.Container(
                content=ft.Container(
                    content=ft.Row([
                        ft.Text("‚úÖ", size=35),
                        ft.Column([
                            ft.Text(self.t("notification_success"), size=24, weight="bold", color="white"),
                            ft.Text(self.t("notification_processed", count=copied_count), size=14, color="white"),
                        ], spacing=0),
                    ], spacing=15),
                    padding=20,
                    bgcolor="#4CAF50",
                    border_radius=10,
                ),
                right=20,
                bottom=20,
                animate_opacity=300,
            )
            
            # –î–æ–¥–∞—î–º–æ –≤ overlay
            page.overlay.append(notification)
            notification.opacity = 0
            page.update()
            
            # –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
            notification.opacity = 1
            page.update()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ö–æ–≤–∞—î–º–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            def hide_notification():
                time.sleep(5)
                notification.opacity = 0
                page.update()
                time.sleep(0.3)
                page.overlay.remove(notification)
                page.update()
            
            threading.Thread(target=hide_notification, daemon=True).start()
        
        def show_success_dialog(copied_count: int, output_path: str):
            """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ —É—Å–ø—ñ—Ö—É"""
            def close_dialog(e=None):
                dialog.open = False
                page.update()
            
            def open_folder(e):
                import subprocess
                try:
                    if os.name == 'nt':  # Windows
                        os.startfile(output_path)
                    elif os.name == 'posix':  # macOS/Linux
                        subprocess.Popen(['xdg-open', output_path])
                except:
                    pass
                close_dialog()
            
            dialog = ft.AlertDialog(
                modal=True,
                bgcolor="#2D2D2D",
                title=ft.Container(
                    content=ft.Column([
                        ft.Row([
                            ft.Text("‚úÖ", size=50),
                            ft.Text("–£–°–ü–Ü–•!", size=32, weight="bold", color="#4CAF50"),
                        ], alignment="center"),
                        ft.Text(
                            "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                            size=16,
                            color="white",
                            text_align="center",
                        ),
                    ], horizontal_alignment="center", spacing=10),
                    bgcolor="#1B5E20",
                    padding=20,
                    border_radius=10,
                ),
                content=ft.Container(
                    content=ft.Column([
                        ft.Container(height=20),
                        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
                        ft.Container(
                            content=ft.Column([
                                ft.Text("üìÅ .maFile —Ñ–∞–π–ª—ñ–≤", size=14, color="grey"),
                                ft.Text(f"{copied_count}", size=50, weight="bold", color="#2196F3"),
                            ], horizontal_alignment="center", spacing=5),
                            bgcolor="#0D47A1",
                            padding=20,
                            border_radius=10,
                        ),
                        ft.Container(height=15),
                        # accounts.txt
                        ft.Container(
                            content=ft.Row([
                                ft.Text("üìÑ", size=30),
                                ft.Text("accounts.txt", size=18, weight="bold", color="#FF9800"),
                                ft.Text("‚úì", size=30, color="#4CAF50"),
                            ], alignment="center"),
                            bgcolor="#E65100",
                            padding=15,
                            border_radius=10,
                        ),
                        ft.Container(height=20),
                        ft.Divider(height=2, color="grey"),
                        ft.Container(height=10),
                        # –®–ª—è—Ö
                        ft.Container(
                            content=ft.Column([
                                ft.Text("üìÇ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤:", size=14, color="grey", weight="bold"),
                                ft.Container(height=5),
                                ft.Text(output_path, size=13, selectable=True, color="white"),
                            ], horizontal_alignment="start"),
                            bgcolor="#424242",
                            padding=15,
                            border_radius=10,
                        ),
                    ], spacing=0, horizontal_alignment="center"),
                    padding=20,
                    width=500,
                ),
                actions=[
                    ft.TextButton(
                        "üìÇ –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É",
                        on_click=open_folder,
                        style=ft.ButtonStyle(color="blue"),
                    ),
                    ft.ElevatedButton(
                        "OK",
                        on_click=close_dialog,
                        bgcolor="green",
                        color="white",
                    ),
                ],
                actions_alignment="spaceBetween",
            )
            
            page.dialog = dialog
            dialog.open = True
            page.update()
        
        def convert_files():
            """–û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó"""
            try:
                log_view.controls.clear()
                log_message(self.t("conversion_started"))
                page.update()
                
                log_message(f"{self.t('reading_file')}: {credentials_file_text.value}")
                credentials = self.converter.extract_credentials(credentials_file_text.value)
                log_message(self.t("found_credentials", count=len(credentials)))
                
                log_message(f"{self.t('processing_mafiles')}: {mafiles_dir_text.value}")
                copied_count = self.converter.process_mafiles(
                    credentials,
                    mafiles_dir_text.value,
                    output_dir_text.value
                )
                
                log_message(self.t("conversion_complete"))
                log_message(self.t("copied_files", count=copied_count))
                log_message(f"{self.t('saved_to')}: {output_dir_text.value}")
                
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–∫–∞–∑—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
                return copied_count, output_dir_text.value
                
            except Exception as ex:
                log_message(f"{self.t('error_occurred')}: {ex}")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –¥—ñ–∞–ª–æ–≥ –ø–æ–º–∏–ª–∫–∏
                error_dialog = ft.AlertDialog(
                    modal=True,
                    bgcolor="#1E1E1E",
                    title=ft.Row([
                        ft.Text("‚ùå", size=40),
                        ft.Text(self.t("error"), size=24, weight="bold", color="red"),
                    ], alignment="center"),
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text(str(ex), size=16, selectable=True),
                            ft.Container(height=10),
                            ft.Text("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π", size=12, color="grey", italic=True),
                        ]),
                        padding=20,
                    ),
                    actions=[
                        ft.TextButton(
                            "–ó–∞–∫—Ä–∏—Ç–∏",
                            on_click=lambda e: setattr(error_dialog, 'open', False) or page.update(),
                            style=ft.ButtonStyle(color="red"),
                        ),
                    ],
                    actions_alignment="end",
                )
                page.dialog = error_dialog
                error_dialog.open = True
                page.update()
        
        async def start_conversion(e):
            """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó"""
            if not credentials_file_text.value:
                page.snack_bar = ft.SnackBar(
                    content=ft.Text(self.t("select_credentials"), color="white"),
                    bgcolor="red",
                )
                page.snack_bar.open = True
                page.update()
                return
            
            if not mafiles_dir_text.value:
                page.snack_bar = ft.SnackBar(
                    content=ft.Text(self.t("select_mafiles"), color="white"),
                    bgcolor="red",
                )
                page.snack_bar.open = True
                page.update()
                return
            
            if not output_dir_text.value:
                page.snack_bar = ft.SnackBar(
                    content=ft.Text(self.t("select_output"), color="white"),
                    bgcolor="red",
                )
                page.snack_bar.open = True
                page.update()
                return
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
            convert_button.disabled = True
            convert_button.text = "‚è≥ –û–±—Ä–æ–±–∫–∞..."
            page.update()
            
            try:
                # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ –∞–ª–µ —á–µ–∫–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                loop = asyncio.get_event_loop()
                result = await loop.run_in_executor(None, convert_files)
                
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
                convert_button.disabled = False
                convert_button.text = self.t("convert")
                page.update()
                
                # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —è–∫—â–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result:
                    copied_count, output_path = result
                    show_success_notification(copied_count, output_path)
                    
            except Exception as ex:
                convert_button.disabled = False
                convert_button.text = self.t("convert")
                page.update()
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
        convert_button = ft.ElevatedButton(
            self.t("convert"),
            on_click=start_conversion,
            bgcolor="#2196F3",
            color="white",
            height=56,
            width=180,
        )
        
        # –ê–≤—Ç–æ–∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
        try:
            self.converter.set_column_settings(
                int(login_column_field.value),
                int(password_column_field.value)
            )
            self.converter.set_start_row(int(start_row_field.value))
        except:
            pass
        
        # –¢–µ–∫—Å—Ç–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–≤–∏
        subtitle_text = ft.Text(
            self.t("subtitle"),
            size=14,
        )
        
        files_dirs_title = ft.Text(self.t("files_dirs"), size=18, weight="bold")
        column_settings_title = ft.Text(self.t("column_settings"), size=18, weight="bold")
        settings_help_text = ft.Text(
            self.t("settings_help"),
            size=11,
            italic=True,
        )
        
        select_button_1 = ft.ElevatedButton(
            self.t("select"),
            on_click=lambda _: credentials_file_picker.pick_files(
                allowed_extensions=["xlsx", "xls"],
                dialog_title=self.t("select_credentials")
            ),
        )
        
        select_button_2 = ft.ElevatedButton(
            self.t("select"),
            on_click=lambda _: mafiles_dir_picker.get_directory_path(
                dialog_title=self.t("select_mafiles")
            ),
        )
        
        select_button_3 = ft.ElevatedButton(
            self.t("select"),
            on_click=lambda _: output_dir_picker.get_directory_path(
                dialog_title=self.t("select_output")
            ),
        )
        
        apply_button = ft.ElevatedButton(
            self.t("apply"),
            on_click=apply_settings,
        )
        
        logs_title = ft.Text(
            f"{self.t('logs')} {self.t('hover_to_view')}",
            size=16,
            weight="bold",
        )
        
        # Card –¥–ª—è –ª–æ–≥—ñ–≤ (—Å—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–æ —â–æ–± –º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è)
        logs_card = ft.Card(
            content=ft.Container(
                content=log_container,
                padding=15,
            ),
            visible=False,
        )
        
        # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
        def toggle_logs_func():
            logs_card.visible = not logs_card.visible
            page.update()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ UI
        main_column = ft.Column([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –º–æ–≤–æ—é —Ç–∞ —Ç–µ–º–æ—é
            ft.Row([
                ft.Column([
                    ft.Text(
                        self.t("title"),
                        size=32,
                        weight="bold",
                        color="blue",
                    ),
                    subtitle_text,
                ], expand=True),
                ft.Row([
                    theme_icon_button,
                    ft.Column([
                        ft.Text(self.t("language"), size=12),
                        language_dropdown,
                    ]),
                ], spacing=10),
            ]),
            
            ft.Divider(),
                    
                    # –í–∏–±—ñ—Ä —Ñ–∞–π–ª—ñ–≤
                    ft.Card(
                        content=ft.Container(
                            content=ft.Column([
                                files_dirs_title,
                                ft.Row([
                                    credentials_file_text,
                                    select_button_1,
                                ]),
                                ft.Row([
                                    mafiles_dir_text,
                                    select_button_2,
                                ]),
                                ft.Row([
                                    output_dir_text,
                                    select_button_3,
                                ]),
                            ]),
                            padding=15,
                        ),
                    ),
                    
                    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤
                    ft.Card(
                        content=ft.Container(
                            content=ft.Column([
                                column_settings_title,
                                ft.Row([
                                    login_column_field,
                                    password_column_field,
                                    start_row_field,
                                    apply_button,
                                    convert_button,
                                ], wrap=True, alignment="center", spacing=10),
                                settings_help_text,
                            ]),
                            padding=15,
                        ),
                    ),
                    
                    # –õ–æ–≥–∏ (—Ö–æ–≤–∞—é—Ç—å—Å—è/–ø–æ–∫–∞–∑—É—é—Ç—å—Å—è)
                    ft.Container(
                        content=logs_title,
                        on_click=lambda e: toggle_logs_func(),
                        padding=10,
                    ),
            logs_card,
        ], 
        spacing=10,
        scroll="auto",
        )
        
        page.add(main_column)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        ft.app(target=self.main)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        app = MaFilesConverterGUI()
        app.run()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
